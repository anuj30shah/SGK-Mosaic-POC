# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
"""
Shows how to use outpainting to generate an image from a source image with 
the Amazon Titan Image Generator G1 model (on demand).
The example uses a mask image to outpaint the original image.
"""
import base64
import io
import os
import json
import logging
import boto3
from PIL import Image
from diffusers.utils import load_image, make_image_grid


from botocore.exceptions import ClientError


class ImageError(Exception):
    "Custom exception for errors returned by Amazon Titan Image Generator G1"

    def __init__(self, message):
        self.message = message


logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


def generate_image(model_id, body):
    """
    Generate an image using Amazon Titan Image Generator G1 model on demand.
    Args:
        model_id (str): The model ID to use.
        body (str) : The request body to use.
    Returns:
        image_bytes (bytes): The image generated by the model.
    """

    logger.info(
        "Generating image with Amazon Titan Image Generator G1 model %s", model_id)

    bedrock = boto3.client(service_name='bedrock-runtime')

    accept = "application/json"
    content_type = "application/json"

    response = bedrock.invoke_model(
        body=body, modelId=model_id, accept=accept, contentType=content_type
    )
    response_body = json.loads(response.get("body").read())

    base64_image = response_body.get("images")[0]
    base64_bytes = base64_image.encode('ascii')
    image_bytes = base64.b64decode(base64_bytes)

    finish_reason = response_body.get("error")

    if finish_reason is not None:
        raise ImageError(f"Image generation error. Error is {finish_reason}")

    logger.info(
        "Successfully generated image with Amazon Titan Image Generator G1 model %s", model_id)

    return image_bytes

def image_to_base64(img) -> str:
    """Convert a PIL Image or local image file path to a base64 string for Amazon Bedrock"""
    if isinstance(img, str):
        if os.path.isfile(img):
            with open(img, "rb") as f:
                return base64.b64encode(f.read()).decode("utf-8")
        else:
            raise FileNotFoundError(f"File {img} does not exist")
    elif isinstance(img, Image.Image):
        buffer = io.BytesIO()
        img.save(buffer, format="PNG")
        return base64.b64encode(buffer.getvalue()).decode("utf-8")
    else:
        raise ValueError(f"Expected str (filename) or PIL Image. Got {type(img)}")

def outpaint(product, width_ratio=0.75, height_ratio=0.5, bg_color="white eggshell", width=1408, height=768, load_image_path="output.png"):
    """
    Entrypoint for Amazon Titan Image Generator G1 example.
    """
    try:
        logging.basicConfig(level=logging.INFO,
                            format="%(levelname)s: %(message)s")

        model_id = 'amazon.titan-image-generator-v2:0'

        # Read image and mask image from file and encode as base64 strings.
        # with open("shirt2.jpg", "rb") as image_file:
        #     input_image = base64.b64encode(image_file.read()).decode('utf8')
        # with open("black.png", "rb") as mask_image_file:
        #     input_mask_image = base64.b64encode(
        #         mask_image_file.read()).decode('utf8')

        image = load_image(load_image_path)


        original_width, original_height = image.size

        target_width = width #extended canvas size
        target_height = height
        position = ( #position the existing image in the center of the larger canvas
            int((target_width - original_width) * width_ratio), 
            int((target_height - original_height) * height_ratio),
        )

        extended_image = Image.new("RGB", (target_width, target_height), (235, 235, 235))
        extended_image.paste(image, position)

        # create a mask of the extended area
        inside_color_value = (0, 0, 0) #inside is black - this is the masked area
        outside_color_value = (255, 255, 255)

        mask_image = Image.new("RGB", (target_width, target_height), outside_color_value)
        original_image_shape = Image.new(
            "RGB", (original_width-40, original_height-40), inside_color_value
        )
        mask_image.paste(original_image_shape, tuple(x+20 for x in position))
        make_image_grid([extended_image, mask_image], rows=1, cols=2)

        


        body = json.dumps({
            "taskType": "OUTPAINTING",
            "outPaintingParams": {
                "text": f"{bg_color} background",
                "negativeText": "bad quality, low res",
                "image": image_to_base64(extended_image),
                "maskImage": image_to_base64(mask_image),
                "outPaintingMode": "DEFAULT"
            },
            "imageGenerationConfig": {
                "numberOfImages": 1,
                "height": 1280,
                "width": 768,
                "cfgScale": 8.0
            }
        }
        )

        image_bytes = generate_image(model_id=model_id,
                                     body=body)
        image = Image.open(io.BytesIO(image_bytes))
        # image.show()
        image.save("static/outpaint.png")
        return image

    except ClientError as err:
        message = err.response["Error"]["Message"]
        logger.error("A client error occurred: %s", message)
        print("A client error occured: " +
              format(message))
    except ImageError as err:
        logger.error(err.message)
        print(err.message)

    else:
        print(
            f"Finished generating image with Amazon Titan Image Generator G1 model {model_id}.")


#outpaint("output.png", "pants")